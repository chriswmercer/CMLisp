- Fix tokenising to correctly build fragments
- Add into operator => for functions, strings, fragments - functions done
    - Interpolation works correctly for different types, key for it as part of interface

- ? operator
- Add keywords: for, concatenate, reverse, etc
- Add web server functionality
- Add open text file functionality
- Add test statements
- Ensure only interpreter is public rest is internal
- Promote keyword
- DateTime type
- IS for function?


DONE
- keyword lookup add being able to find based on fewest letters e.g. con = concatenate
- Fix implicit casts
- Fix symbol operations to use those casts (int is done, string is done)
- Add useful symbol operations e.g. + string = concat string done for + Special operators moved to be in the types class  
- Add concept of local scope to functions
- Add guard to check identifiers exist in scope else exception
- Add catch (1 catch per scope, registered as a special type of function)
- > < >= <= operators

-----

TYPE 		+			-			*			/			==		
String 		concat  	x   		int 		x 			==		
Integer																											
Decimal																
Array 		add el  	remove el 									

Boolean		x			x			x			x	
Fragment    contact		x			int 		x					
KVP 		x			x			x    		x					
Nil			x			x			x			x			nil only
Object      x 		    x    		x					            

    (1 + 2)
    (1 * 2)
    (2 - 1)
    (4 / 2)
    ("test" + "string")
    ("test" * 2)
    (1.1 + 1.2)
    (2.5 - 1.5)
    (2.5 * 2.5)
    (5.5 / 2.5)
    (1.1 + 2)
    (3.4 - 2)
    (3.5 * 2)
    (10.75 / 2.5)
    ([1, 2, 3] + [4, 5])
    ([1, 2, 3] + 4)
    (true and false)
    (true or false)
    (true xor true)
    (not true)

